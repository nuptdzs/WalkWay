package com.zk.library.common.ui;import android.content.Context;import android.util.AttributeSet;import android.util.Log;import android.view.GestureDetector;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;/** * 自定义viewpager，item可以是不同类型的布局 */public class CustomViewPager extends ViewGroup {     /** 手势识别器 */    private GestureDetector detector;    /** 上下文 */    private Context ctx;    /** 第一次按下的X轴的坐标 */    private int firstDownX;    /**     * 记录上次View的id     */    private int preId = 0;    /** 记录当前View的id */    private int currId = 0;    /** 模拟动画工具 */    private CustomScroller myScroller;    /** 标记是否快速的滑动 */    private boolean isFling;    /** 标记是否滑动*/    private boolean isScrollerEnable = true;    /**     * 页面变化监听器     */    private OnPageChangeLister onPageChangeLister;    /**     * 设置页面监听     * @param onPageChangeLister     */    public void setOnPageChangeLister(OnPageChangeLister onPageChangeLister) {        this.onPageChangeLister = onPageChangeLister;    }     public CustomViewPager(Context context, AttributeSet attrs) {        super(context, attrs);        this.ctx = context;        init();    }    /**     *     * @param isScroller 是否可以滑动     */    public void  setScrollerEnable(boolean isScroller){        isScrollerEnable = isScroller;    }    /**     * 初始化     */    private void init() {        myScroller = new CustomScroller(ctx);        detector = new GestureDetector(ctx,                new GestureDetector.OnGestureListener() {                     @Override                    public boolean onSingleTapUp(MotionEvent e) {                        return false;                    }                     @Override                    public void onShowPress(MotionEvent e) {                    }                     @Override                    public boolean onScroll(MotionEvent e1, MotionEvent e2,                                            float distanceX, float distanceY) {                        if (isScrollerEnable) {                            scrollBy((int) distanceX, 0);                        }                        return false;                    }                     @Override                    public void onLongPress(MotionEvent e) {                    }                     @Override                    public boolean onFling(MotionEvent e1, MotionEvent e2,                                           float velocityX, float velocityY) {                        isFling = true;                        float startX = e1.getX();                        float endX = e2.getX();                        Log.e("onFling", "startX " + startX);                        Log.e("onFling", "endX "+endX);                        if (velocityX > 0 && currId > 0) { // 快速向右滑动                            currId--;                            Log.e("onFling", "currId --");                        } else if (velocityX < 0 && currId < getChildCount() - 1) {// 快速向左滑动                            currId++;                            Log.e("onFling", "currId ++");                        }                        if(isScrollerEnable){                             moveToDest(currId);                        }                        return false;                    }                     @Override                    public boolean onDown(MotionEvent e) {                        return false;                    }                });    }    /**     * 快速移动到指定位置     * @param itemId     */    public void flingDest(int itemId){        currId = itemId;        moveToDest(currId);    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        for (int i = 0; i < getChildCount(); i++) {            View v = getChildAt(i);            v.measure(widthMeasureSpec, heightMeasureSpec);        }    }    /**     * 对子View进行布局，确定子View的位置 changed 若为true，     * 说明布局发生了变化 l         指当前View位于父View的位置     */    @Override    protected void onLayout(boolean changed, int l, int t, int r, int b) {        for (int i = 0; i < getChildCount(); i++) {            View view = getChildAt(i);            // 指定子View的位置 ，左、上、右、下，是指在ViewGroup坐标系中的位置            view.layout(0 + i * getWidth(), 0, getWidth() + i * getWidth(),                    getHeight());        }    }    // 第一次手指按下的X轴坐标    private int firstX = 0;    // 第一次手指按下的Y轴坐标    private int firstY = 0;    @Override    public boolean onInterceptTouchEvent(MotionEvent ev) {        boolean result = false;  //标记方法返回值        switch (ev.getAction()) {            case MotionEvent.ACTION_DOWN : // 手指抬起                // 让手势识别器记录按下事件，防止左右滑动页面跳动的“bug”                detector.onTouchEvent(ev);                firstX = (int) ev.getX();                firstY = (int) ev.getY();                break;            case MotionEvent.ACTION_MOVE :// 手指移动                // 手指横向移动的位移绝对值                int diffX = (int) Math.abs(ev.getX() - firstX);                // 手指竖直移动的位移绝对值                int diffY = (int) Math.abs(ev.getY() - firstY);                if (diffX > diffY && diffX > 20) {                    result = true;                } else {                    result = false;                }                break;            case MotionEvent.ACTION_UP : // 手指抬起                break;            default :                break;        }        return result;    }    @Override    public boolean onTouchEvent(MotionEvent event) {        detector.onTouchEvent(event); // 指定手势识别器去处理滑动事件        // 还是得自己处理一些逻辑        switch (event.getAction()) {            case MotionEvent.ACTION_DOWN : // 按下                firstDownX = (int) event.getX();                break;            case MotionEvent.ACTION_MOVE: // 移动                break;            case MotionEvent.ACTION_UP : // 抬起                if (!isFling) {                    int nextId = 0; // 记录下一个View的id                    if (event.getX() - firstDownX > getWidth() / 2 - 50) {                        // 手指离开点的X轴坐标-firstDownX > 屏幕宽度的一半，左移                        nextId = (currId - 1) <= 0 ? 0 : currId - 1;                    } else if (firstDownX - event.getX() > getWidth() / 2 - 50) {                        // 手指离开点的X轴坐标 - firstDownX < 屏幕宽度的一半，右移                        nextId = currId + 1;                    } else {                        nextId = currId;                    }                    moveToDest(nextId);                }                isFling = false;                break;            default :                break;        }        return true;    }     /**     * 控制视图的移动     *      * @param nextId     */    private void moveToDest(int nextId) {        // nextId的合理范围是，nextId >=0 && nextId <= getChildCount()-1        currId = (nextId >= 0) ? nextId : 0;        currId = (nextId <= getChildCount() - 1)                ? nextId                : (getChildCount() - 1);        // 视图移动,太直接了，没有动态过程        // scrollTo(currId * getWidth(), 0);        // 要移动的距离 = 最终的位置 - 现在的位置        int distanceX = currId * getWidth() - getScrollX();        Log.e("CustomViewPager", "moveToDest distanceX " + distanceX);        Log.e("CustomViewPager", "moveToDest getScrollX() " + getScrollX());        // 设置运行的时间        myScroller.startScroll(getScrollX(), 0, distanceX, 0);        // 刷新视图        invalidate();        //设置页面监听        if (onPageChangeLister != null) {            onPageChangeLister.onPageScrolled(nextId,distanceX);        }    }     /**     * invalidate();会导致这个方法的执行     */    @Override    public void computeScroll() {        if (myScroller.computeOffset()) {            int newX = (int) myScroller.getCurrX();            scrollTo(newX, 0);            invalidate();            Log.e("CustomViewPager", "computeScroll currX " + newX + "");        } else {            if (preId != currId) {                if (onPageChangeLister != null) {                    onPageChangeLister.onPageSelected(currId);                    preId = currId;                }            }            Log.e("CustomViewPager", "computeScroll else " + "is on");        }    }        /***     * 页面变化监听器     *     */    public interface OnPageChangeLister{        /**         * 页面滚动事件         * @param position 页面位置         */        void onPageScrolled(int position, float positionOffset);        /**         * 页面切换到positon页面         *         * @param position 页面位置         */        void onPageSelected(int position);    } }